{"ast":null,"code":"var _jsxFileName = \"/Users/ulam/skill_up/next.js/pages/notes/[id].js\",\n    _this = this,\n    _s = $RefreshSig$();\n\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport React from \"react\";\nimport { useRouter } from \"next/router\";\nimport Link from \"next/link\"; //* THIS IS ALL CLIENT SIDE ROUTING\n//* AFTER setting up theme-ui\n\nexport var __N_SSP = true;\nexport default _s(function (_ref) {\n  _s();\n\n  var note = _ref.note;\n  var router = useRouter(); // once you inject {note}, you no longer need the query below\n  // const { id } = router.query;\n\n  return jsx(\"div\", {\n    sx: {\n      variant: \"containers.page\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    },\n    __self: _this\n  }, jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    },\n    __self: _this\n  }, \"Note: \", note.title, \" \"));\n}, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n}); //* getServerSideProps will get the data upon every request (not at build time)\n//* Great for dynamic things, provides you with params\n//* will only run on the server so will not show on the front end\n//* BEFORE setting up theme-ui\n// export default () => {\n//   const router = useRouter();\n//   // id that's deconstructed here is the same [id] in the file name\n//   // query is an object with a bunch of parameters, and id is one of them\n//   const { id } = router.query;\n//   return (\n//     <div>\n//       <button onClick={e => router.push(\"/\")}>Go Home</button>\n//       {/* <button onClick={e => router.push('/user/[id]', `/user/${id}`)}>\n//         Dashboard\n//       </button> */}\n//       <h1>Note: {id}</h1>\n//       <Link href='/notes'>\n//         <a>Notes</a>\n//       </Link>\n//     </div>\n//   );\n// };","map":{"version":3,"sources":["/Users/ulam/skill_up/next.js/pages/notes/[id].js"],"names":["jsx","React","useRouter","Link","note","router","variant","title"],"mappings":";;;;AAAA;;AACA;AACA,SAASA,GAAT,QAAoB,UAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,IAAP,MAAiB,WAAjB,C,CAEA;AAEA;;;AACA,kBAAe,gBAAc;AAAA;;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAC3B,MAAMC,MAAM,GAAGH,SAAS,EAAxB,CAD2B,CAE3B;AACA;;AAEA,SACE;AAAK,IAAA,EAAE,EAAE;AAAEI,MAAAA,OAAO,EAAE;AAAX,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAWF,IAAI,CAACG,KAAhB,MADF,CADF;AAKD,CAVD;AAAA,UACiBL,SADjB;AAAA,G,CAYA;AACA;AACA;AAmBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport React from \"react\";\nimport { useRouter } from \"next/router\";\nimport Link from \"next/link\";\n\n//* THIS IS ALL CLIENT SIDE ROUTING\n\n//* AFTER setting up theme-ui\nexport default ({ note }) => {\n  const router = useRouter();\n  // once you inject {note}, you no longer need the query below\n  // const { id } = router.query;\n\n  return (\n    <div sx={{ variant: \"containers.page\" }}>\n      <h1>Note: {note.title} </h1>\n    </div>\n  );\n};\n\n//* getServerSideProps will get the data upon every request (not at build time)\n//* Great for dynamic things, provides you with params\n//* will only run on the server so will not show on the front end\nexport async function getServerSideProps({ params, req, res }) {\n  const response = await fetch(`http://localhost:3000/api/note/${params.id}`);\n\n  if (!response.ok) {\n    res.writeHead(302, { Location: \"/notes\" });\n    res.end();\n    return { props: {} };\n  }\n\n  const { data } = await response.json();\n\n  if (data) {\n    return {\n      props: { note: data }\n    };\n  }\n}\n\n//* BEFORE setting up theme-ui\n// export default () => {\n//   const router = useRouter();\n//   // id that's deconstructed here is the same [id] in the file name\n//   // query is an object with a bunch of parameters, and id is one of them\n//   const { id } = router.query;\n\n//   return (\n//     <div>\n//       <button onClick={e => router.push(\"/\")}>Go Home</button>\n//       {/* <button onClick={e => router.push('/user/[id]', `/user/${id}`)}>\n//         Dashboard\n//       </button> */}\n//       <h1>Note: {id}</h1>\n//       <Link href='/notes'>\n//         <a>Notes</a>\n//       </Link>\n//     </div>\n//   );\n// };\n"]},"metadata":{},"sourceType":"module"}