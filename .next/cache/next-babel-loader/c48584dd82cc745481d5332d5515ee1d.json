{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport nc from \"next-connect\";\nimport notes from \"../../../src/data/data\"; // have to parseInt id bc it is a string in the db\n\nconst getNote = id => notes.find(n => n.id === parseInt(id)); //*Note: we are using query and not the params\n\n\nconst handler = nc() // GET the ID of the NOTE\n.get((req, res) => {\n  const note = getNote(req.query.id);\n\n  if (!note) {\n    res.statusCode(404);\n    res.end();\n    return;\n  }\n\n  res.json({\n    data: note\n  });\n}) // EDIT A NOTE\n.patch((req, res) => {\n  const note = getNote(req.query.id);\n\n  if (!note) {\n    res.status(404);\n    res.end();\n    return;\n  }\n\n  const i = notes.findIndex(n => n.id === parseInt(req.query.id));\n\n  const updated = _objectSpread(_objectSpread({}, note), req.body);\n\n  notes[i] = updated;\n  res.json({\n    data: updated\n  });\n}) // DELETEING A NOTE\n.delete((req, res) => {\n  const note = getNote(req.query.id);\n\n  if (!note) {\n    res.status(404);\n    res.end();\n    return;\n  }\n\n  const i = notes.findIndex(n => n.id === parseInt(req.query.id));\n  notes.splice(i, 1);\n  res.json({\n    data: req.query.id\n  });\n});\nexport default handler;","map":{"version":3,"sources":["/Users/ulam/skill_up/next.js/pages/api/note/[id].js"],"names":["nc","notes","getNote","id","find","n","parseInt","handler","get","req","res","note","query","statusCode","end","json","data","patch","status","i","findIndex","updated","body","delete","splice"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,cAAf;AACA,OAAOC,KAAP,MAAkB,wBAAlB,C,CAEA;;AACA,MAAMC,OAAO,GAAGC,EAAE,IAAIF,KAAK,CAACG,IAAN,CAAWC,CAAC,IAAIA,CAAC,CAACF,EAAF,KAASG,QAAQ,CAACH,EAAD,CAAjC,CAAtB,C,CAEA;;;AAEA,MAAMI,OAAO,GAAGP,EAAE,GAChB;AADgB,CAEfQ,GAFa,CAET,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjB,QAAMC,IAAI,GAAGT,OAAO,CAACO,GAAG,CAACG,KAAJ,CAAUT,EAAX,CAApB;;AAEA,MAAI,CAACQ,IAAL,EAAW;AACTD,IAAAA,GAAG,CAACG,UAAJ,CAAe,GAAf;AACAH,IAAAA,GAAG,CAACI,GAAJ;AACA;AACD;;AAEDJ,EAAAA,GAAG,CAACK,IAAJ,CAAS;AAAEC,IAAAA,IAAI,EAAEL;AAAR,GAAT;AACD,CAZa,EAad;AAbc,CAcbM,KAda,CAcP,CAACR,GAAD,EAAMC,GAAN,KAAc;AACnB,QAAMC,IAAI,GAAGT,OAAO,CAACO,GAAG,CAACG,KAAJ,CAAUT,EAAX,CAApB;;AAEA,MAAI,CAACQ,IAAL,EAAW;AACTD,IAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX;AACAR,IAAAA,GAAG,CAACI,GAAJ;AACA;AACD;;AAED,QAAMK,CAAC,GAAGlB,KAAK,CAACmB,SAAN,CAAgBf,CAAC,IAAIA,CAAC,CAACF,EAAF,KAASG,QAAQ,CAACG,GAAG,CAACG,KAAJ,CAAUT,EAAX,CAAtC,CAAV;;AACA,QAAMkB,OAAO,mCAAQV,IAAR,GAAiBF,GAAG,CAACa,IAArB,CAAb;;AAEArB,EAAAA,KAAK,CAACkB,CAAD,CAAL,GAAWE,OAAX;AACAX,EAAAA,GAAG,CAACK,IAAJ,CAAS;AAAEC,IAAAA,IAAI,EAAEK;AAAR,GAAT;AACD,CA5Ba,EA6Bd;AA7Bc,CA8BbE,MA9Ba,CA8BN,CAACd,GAAD,EAAMC,GAAN,KAAc;AACpB,QAAMC,IAAI,GAAGT,OAAO,CAACO,GAAG,CAACG,KAAJ,CAAUT,EAAX,CAApB;;AAEA,MAAI,CAACQ,IAAL,EAAW;AACTD,IAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX;AACAR,IAAAA,GAAG,CAACI,GAAJ;AACA;AACD;;AAED,QAAMK,CAAC,GAAGlB,KAAK,CAACmB,SAAN,CAAgBf,CAAC,IAAIA,CAAC,CAACF,EAAF,KAASG,QAAQ,CAACG,GAAG,CAACG,KAAJ,CAAUT,EAAX,CAAtC,CAAV;AACAF,EAAAA,KAAK,CAACuB,MAAN,CAAaL,CAAb,EAAgB,CAAhB;AAEAT,EAAAA,GAAG,CAACK,IAAJ,CAAS;AAAEC,IAAAA,IAAI,EAAEP,GAAG,CAACG,KAAJ,CAAUT;AAAlB,GAAT;AACD,CA3Ca,CAAhB;AA6CA,eAAeI,OAAf","sourcesContent":["import nc from \"next-connect\";\nimport notes from \"../../../src/data/data\";\n\n// have to parseInt id bc it is a string in the db\nconst getNote = id => notes.find(n => n.id === parseInt(id));\n\n//*Note: we are using query and not the params\n\nconst handler = nc()\n  // GET the ID of the NOTE\n  .get((req, res) => {\n    const note = getNote(req.query.id);\n\n    if (!note) {\n      res.statusCode(404);\n      res.end();\n      return;\n    }\n\n    res.json({ data: note });\n  })\n  // EDIT A NOTE\n  .patch((req, res) => {\n    const note = getNote(req.query.id);\n\n    if (!note) {\n      res.status(404);\n      res.end();\n      return;\n    }\n\n    const i = notes.findIndex(n => n.id === parseInt(req.query.id));\n    const updated = { ...note, ...req.body };\n\n    notes[i] = updated;\n    res.json({ data: updated });\n  })\n  // DELETEING A NOTE\n  .delete((req, res) => {\n    const note = getNote(req.query.id);\n\n    if (!note) {\n      res.status(404);\n      res.end();\n      return;\n    }\n\n    const i = notes.findIndex(n => n.id === parseInt(req.query.id));\n    notes.splice(i, 1);\n\n    res.json({ data: req.query.id });\n  });\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}